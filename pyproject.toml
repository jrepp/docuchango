[project]
name = "docuchango"
version = "1.3.0"
description = "Docusaurus validation and repair framework for opinionated micro-CMS documentation, designed for human-agent collaboration workflows"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    { name = "Jacob Repp", email = "jacobrepp@gmail.com" }
]
license = { text = "MPL-2.0" }
keywords = ["docusaurus", "documentation", "validation", "markdown", "cms", "collaboration", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Documentation",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
]

dependencies = [
    "python-frontmatter>=1.1.0",
    "pydantic>=2.10.0",
    "pyyaml>=6.0.2",
    "click>=8.1.0",
    "rich>=13.9.0",
    "grpcio>=1.69.0",
    "grpcio-tools>=1.69.0",
    "psycopg2-binary>=2.9.10",
    "docker>=7.1.0",
    "eval_type_backport>=0.2.0; python_version < '3.10'",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.6.0",
    "pytest-asyncio>=0.24.0",
    "pytest-timeout>=2.3.0",
    "ruff>=0.9.0",
    "mypy>=1.14.0",
    "types-pyyaml>=6.0.12",
    "types-psycopg2>=2.9.21",
]

[project.scripts]
docuchango = "docuchango.cli:main"
dcc-validate = "docuchango.cli:validate"
dcc-fix = "docuchango.cli:fix"

[project.urls]
Homepage = "https://github.com/jrepp/docuchango"
Documentation = "https://github.com/jrepp/docuchango#readme"
Repository = "https://github.com/jrepp/docuchango"
Issues = "https://github.com/jrepp/docuchango/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
include = [
    "/docuchango",
    "/docs",
    "/templates",
    "/examples",
]

[tool.hatch.build.targets.sdist]
include = [
    "/docuchango",
    "/docs",
    "/templates",
    "/examples",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Parallel execution available via: pytest -n auto
# Note: Current test suite is fast enough that parallelization adds overhead
# Use -n 2 or -n 4 for larger test suites

[tool.coverage.run]
source = ["docuchango"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit security
    "A",   # flake8-builtins
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S603",  # subprocess without shell=True
    "S607",  # starting process with partial path
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "S101", "ARG001"]
"test_install.py" = ["RET505"]
"docuchango/cli.py" = ["ARG001"]
"docuchango/fixes/*" = ["RET505"]
"docuchango/testing/*" = ["S311", "S107", "S110", "SIM105"]
"docuchango/validator.py" = ["PTH123"]

[tool.ruff.lint.isort]
known-first-party = ["docuchango"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
# Exclude non-core modules from strict checking
exclude = [
    "docuchango/fixes/.*",
    "docuchango/testing/.*",
    "test_install\\.py",
]

[[tool.mypy.overrides]]
module = [
    "frontmatter.*",
    "docker.*",
    "grpc.*",
    "grpcio.*",
    "psycopg2.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
disable_error_code = ["call-arg", "arg-type", "no-untyped-call"]

[[tool.mypy.overrides]]
module = ["docuchango.validator", "docuchango.cli"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
disable_error_code = ["no-untyped-call", "no-untyped-def", "no-any-return"]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
upload_to_vcs_release = true
build_command = "uv build"
commit_message = "chore(release): {version}"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "^chore\\(release\\):",
    "^Merge pull request",
]

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["feat", "fix", "docs", "style", "refactor", "perf", "test", "build", "ci", "chore"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
