[project]
name = "docuchango"
version = "0.1.0"
description = "Docusaurus validation and repair framework for opinionated micro-CMS documentation, designed for human-agent collaboration workflows"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "Jacob Repp", email = "jacobrepp@gmail.com" }
]
license = { text = "MIT" }
keywords = ["docusaurus", "documentation", "validation", "markdown", "cms", "collaboration", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Documentation",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
]

dependencies = [
    "python-frontmatter>=1.1.0",
    "pydantic>=2.10.0",
    "pyyaml>=6.0.2",
    "click>=8.1.0",
    "rich>=13.9.0",
    "grpcio>=1.69.0",
    "grpcio-tools>=1.69.0",
    "psycopg2-binary>=2.9.10",
    "docker>=7.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.6.0",
    "pytest-asyncio>=0.24.0",
    "pytest-timeout>=2.3.0",
    "ruff>=0.9.0",
    "mypy>=1.14.0",
    "types-pyyaml>=6.0.12",
    "types-psycopg2>=2.9.21",
]

[project.scripts]
docuchango = "docuchango.cli:main"
dcc-validate = "docuchango.cli:validate"
dcc-fix = "docuchango.cli:fix"

[project.urls]
Homepage = "https://github.com/jrepp/docuchango"
Documentation = "https://github.com/jrepp/docuchango#readme"
Repository = "https://github.com/jrepp/docuchango"
Issues = "https://github.com/jrepp/docuchango/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["docuchango"]

[tool.hatch.build.targets.sdist]
include = [
    "/docuchango",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["docuchango"]
branch = true
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.ruff.lint.isort]
known-first-party = ["docuchango"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
# Exclude non-core modules from strict checking
exclude = [
    "docuchango/fixes/.*",
    "docuchango/testing/.*",
    "test_install\\.py",
]

[[tool.mypy.overrides]]
module = [
    "frontmatter.*",
    "docker.*",
    "grpc.*",
    "grpcio.*",
    "psycopg2.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disable_error_code = ["call-arg", "arg-type"]
