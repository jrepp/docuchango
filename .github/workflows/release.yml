name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    concurrency: release

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        run: uv python install 3.12

      - name: Python Semantic Release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

          # Store the current tag before running semantic-release
          OLD_TAG="$(git describe --tags --abbrev=0 2>/dev/null || echo 'none')"

          # Run semantic-release (uv tool run installs and runs in one step)
          uv tool run python-semantic-release version --no-push

          # Check if a new tag was created
          NEW_TAG="$(git describe --tags --abbrev=0 2>/dev/null || echo 'none')"

          if [ "$OLD_TAG" = "$NEW_TAG" ]; then
            echo "No version change detected (tag: $NEW_TAG)"
            echo "released=false" >> "$GITHUB_OUTPUT"
          else
            echo "Version bumped from $OLD_TAG to $NEW_TAG"
            git push origin main --follow-tags
            echo "released=true" >> "$GITHUB_OUTPUT"
            echo "version=${NEW_TAG}" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub Release
        if: steps.release.outputs.released == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.release.outputs.version }}
        run: |
          # Extract the changelog section for this version
          # The VERSION already includes 'v' prefix (e.g., v1.0.2)
          # Escape regex metacharacters in VERSION for safe use in awk pattern
          ESCAPED_VERSION=$(printf '%s\n' "$VERSION" | sed -e 's/[]\\/$*.^[]/\\&/g')
          CHANGELOG_SECTION=$(awk "/^## ${ESCAPED_VERSION} /{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md)

          # Fallback to generic message if changelog section is empty
          if [ -z "$CHANGELOG_SECTION" ]; then
            CHANGELOG_SECTION="Release ${VERSION}"
          fi

          # Write changelog section to a temporary file to safely handle multiline content
          NOTES_FILE=$(mktemp)
          printf "%s\n" "$CHANGELOG_SECTION" > "$NOTES_FILE"

          # Create GitHub release with changelog
          gh release create "${VERSION}" \
            --title "${VERSION}" \
            --notes-file "$NOTES_FILE" \
            --latest

          # Clean up temporary file
          rm -f "$NOTES_FILE"
